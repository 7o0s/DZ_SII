{"name": "Dream Studio", "name_review": "Dream Studio (Import)", "ref": "https://www.ign.com/articles/2000/11/30/dream-studio-import", "text": "If you think that kicking out a professional-quality game is a snap, think again. I've served my time in the ugly world of game development, observing the incredible world of missed deadlines, incompetent management, and cranky team members who'd rather be somewhere else. Gone are the days when two guys in their garage could design a killer game, and hand it off to a competent publisher for global distribution  the industry has transitioned into an era of enormous teams spearheaded by Evil Guys in Italian Power Suits.  Ever wish that game development would go back to its grassroots beginnings? Are you sick of cookie-cutter sequels and predictable storylines? Do you wanna make a game that shows the world your mad development skills? It looks like your chance has come, Sparky  provided you know Japanese. Sega and NEXTech have unleashed a game creation system entitled Dreamstudio in the Nippon, which gives Joe Otaku the opportunity to patch together his own zero-budget masterpiece using only a Dreamcast and an empty VMU. The concept is awesome  but is it versatile enough to make something good? Dreamstudio ships on a single GD-ROM, and includes two fat reference manuals in a double-CD jewel case.  To get started, you'll need to find a spare VMU and wipe the data for maximum storage space. You'd also be much happier with a Dreamcast keyboard, unless you enjoy entering copious amounts of text with a gamepad. (Note that I have not had the opportunity to try Dreamstud!o with a US keyboard  if you use one, there may be problems when it comes to switching between ~Kana~ [Japanese] and ~Romaji~ [Roman character] input.)  And then you build. Dreamstud!o is just about as friendly as a 3D game-authoring tool can be, and offers two construction modes: Beginner and Expert. The former is a simplified building system, with many of the game's advanced options unavailable  the level of interaction in the resulting game will be extremely limited. Expert Mode opens up the whole box of tricks, unlocking all of the available authoring tools.  The first tool for you to master is the World Edit system. This is a robust, 3D level editor that lets you patch together good-looking environments -- fast. To start, you'll need to pull up one of the game's maps, which are simple, ready-made environments that range from barren deserts to grassy plains. Once you've pulled up your landform of choice, it's time to start packing it full of stuff.  Pressing the A button will bring up the game's object resource library, which is amazingly complete. If you want something vaguely fantasy-related, it's probably here: you'll find dozens of buildings, innumerable plants and trees, and hundreds of set-pieces like chairs, lamps, and treasure-chests. You'll also find effects objects, such as streams of light and energy portals. To be honest, browsing through the library is nothing short of overwhelming  I wish the manual included a full object list for easier reference.  Selecting and dropping objects into the environment is as easy as it gets. You choose the X, Y, and Z position by moving the digital pad, and tweak the horizontal rotation of the object with the analog pad. There are no restraints on where you can place objects  if you wanna make floating houses, it's in the cards. 3D objects can freely intersect with each other, and exhibit perfect polygon clipping (outstanding for building rocky outcroppings or dungeons). The only building limitation is that you can't rotate objects on the Y or Z axis  drat.  Another lovely touch is the ability to tweak environmental effects, such as lighting and fog. You can change the game's sky texture, and replace fluffy clouds with menacing thunderheads, a placid sunset, or a twinkling starfield. Since Dreamstud!o uses vertex lighting, you can shift the position of three different light-sources and assign different lighting values to specified characters and objects (for example, try lighting a menacing boss from below with red light to make 'im look skeery).  While the object library is ridiculously huge, I would have appreciated more base environments  variety is always good. On the other hand, it's possible to use the same prefab environment more than once  variations in lighting, object placement, and environmental effects can make two identical map bases look completely different. There's also an ~empty~ environment with a black background, which allows you to move in objects and build everything from prefab objects. While this takes longer, it's possible to build original, decent-looking interiors with a little bit of trickery  and you shouldn't have any issues with collision, as each object has a pre-set collision box.  It's worth noting that the actual in-game movement control is pretty run-of-the-mill  the auto-camera ain't great, though squeezing both L and R triggers centers the view behind your character's head. Pressing a direction on the digital pad pops into a first-person mode, allowing you to check out your surroundings from your character's eyes. It's all standard stuff, really.  Each map environment is limited by the amount of storage space on the VMU, which is measured by a ~power bar~ to the upper-right of the screen. Unfortunately, I ran into a few problems in terms of memory limitations  and we can blame it all on Sega's crappy design of the VMU, which is limited to a pathetic 128K of space. Needless to say, if you're intent on making a town with Shen Mue-style detail levels and dozens of NPCs, you're going to run out of space. With the game logic running, you can expect to cram around ten to fifteen ~maps~ into a single VMU, so try to keep your designs within reason.  The game leaves frame-rate management up to you as well, and you should be able to maintain a rock-solid 30fps unless there are tons of characters moving around at once  and I encountered some odd ~popping~ when more than eight characters were on-screen at once (this was remedied by a swap into first-person mode, however).  Another feature you shouldn't neglect is the music library. There are a few dozen nicely-composed PCM tracks ready to be used, and some of them sound very familiar (I get the feeling that they ~borrowed~ several selections from the Skies of Arcadia soundtrack). On the other hand, the sound effect library is embarrassingly poor  I've heard better samples on public-domain CD-ROMs, and you'd be better off using audio effects sparingly.  The best feature? There's very little wait for your level to compile  the majority of the time is spent waiting for the objects to spool off the GD-ROM. Just hit the start button, select ~Play,~ and you're thrown into the game  regardless of how incomplete your map is. Here, you can spot potential problem areas, or errors you might have made while building. Let's just say that this feature is a godsend (especially after waiting upwards of an hour for my old Quake levels to compile.)  Once you've finished building your environments, it's time to populate them with NPCs. The game's character selection is impressive, featuring dozens of animated models with up to four different ~skins~ apiece. NPCs can be set to wander, follow, or stand in one spot idling. Multiple facial expressions can be selected, and there are several hundred high-quality character animations in the motion library. The only downside to this is that every character uses the same motions  a beefy minotaur essentially has the same walk cycle of a standard townsperson.  Game scripts are definable via Dreamstud!o's scripting language, which is the most daunting part of the construction set. The game gives you an object-oriented interface and an editing timeline, which allows you to do the game's actual programming. ~Wires~ can be strung from event to event, and you'll need to keep everything organized on the editing screen to avoid clutter. While slapping together some sweet-looking environments is easy, bringing it all together into playable code is going to be one helluva task (though still infinitely easier than learning a real programming language). If you're serious about making something playable with Dreamstud!o, you'd better be ready for extensive trial-and-error  this is not going to be a walk in the park, and having a few Japanese-speaking friends would be to your advantage.   Once you've mastered the OOP system, you'll be able to script ways for your characters to fight, jump, open doors, throw switches, and interact with people. You can also kick out cutscenes, where you set up camera shots, tracking movements, and character and effect animations. While these cinemas can look professional  approaching Skies of Arcadia level, if you know what you're doing  there's a black flash inbetween camera cuts, which gets distracting after awhile.  The demos included with Dreamstud!o are decent enough, and show off the game's programming systems with extensive editable demos. There's also a full-blown adventure game that shows you what the system is really capable of  -- you play an elf sent to explore Castle Dreamcast and Mount Saturn, and work your way  through a number of Zelda-style puzzles and environments.  Hopefully, the pithy 6,000 Japanese gamers who bought the game will start cranking out some interesting creations, and make them available for download on the official Dreamstud!o homepage. I plan to log some major hours with Dreamstud!o during Christmas vacation, and I'm itching produce a complete ten to fifteen-minute adventure game (we'll throw movies, screens, and a VMU file containing the game on-line when  and if!  it's ready).  Be warned: Dreamstud!o is positively drowning in Japanese text, and importers who don't know much Japanese may have to go through a lot of frustration until they figure out the system. I'd be pleased as punch to see a domestic North American release of Dreamstud!o (or a translation guide from someone who knows what they're talking about).  In any case, while the system does have limitations (most stemming from the minuscule size of the VMU), DreamStud!o is one of the slickest construction kits I've ever seen, and the results can be just as professional as middle-tier Dreamcast games. If you're a determined code-monkey hellbent on creating your own DC game, this is the tool for you  just make sure you've got a kanji dictionary handy. -- Colin Williamson, IGNDC", "date": "Nov 30, 2000"}